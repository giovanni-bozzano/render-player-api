buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        maven { url = 'https://repo.spongepowered.org/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

ext.simpleVersion = "${mod_version}"
version = "${minecraft_version}-${project.simpleVersion}"
group = 'api.player'
archivesBaseName = 'renderplayerapi'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'

minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   Snapshot are built nightly.
    // stable_#            Stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: 'snapshot', version: '20200420-1.15.1'

    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            mods {
                renderplayerapi {
                    source sourceSets.main
                }
            }
        }
        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            mods {
                renderplayerapi {
                    source sourceSets.main
                }
            }
        }
        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            args '--mod', 'renderplayerapi', '--all', '--output', file('src/generated/resources/')
            mods {
                renderplayerapi {
                    source sourceSets.main
                }
            }
        }
    }
}

mixin {
    add sourceSets.main, 'mixins.renderplayerapi.refmap.json'
}

repositories {
    maven { url = 'https://repo.spongepowered.org/maven' }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.15.2-31.1.0'
    implementation 'org.spongepowered:mixin:0.8.1-SNAPSHOT'
}

def attrs = [
        'Specification-Title'     : 'Render Player API',
        'Specification-Vendor'    : 'Divisor, GioBozza',
        'Specification-Version'   : '1', // We are version 1 of ourselves
        'Implementation-Title'    : project.name,
        'Implementation-Version'  : project.version,
        'Implementation-Vendor'   : 'Divisor, GioBozza',
        'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
        'MixinConnector'          : 'api.player.render.asm.MixinConnector'
]

jar {
    manifest {
        attributes(attrs)
    }
}

// Example configuration to allow publishing using the maven-publish task
// we define a custom artifact that is sourced from the reobfJar output task
// and then declare that to be published
// Note you'll need to add a repository here
def reobfFile = file("$buildDir/reobfJar/output.jar")
def reobfArtifact = artifacts.add('default', reobfFile) {
    type 'jar'
    builtBy 'reobfJar'
}
publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact reobfArtifact
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}
build.dependsOn sourcesJar

artifacts {
    archives sourcesJar
}

processResources {
    inputs.property 'version', project.version
    from(sourceSets.main.resources.srcDirs) {
        include 'META-INF/mods.toml'
        expand 'version': project.version
    }
    from(sourceSets.main.resources.srcDirs) {
        exclude 'META-INF/mods.toml'
    }
}